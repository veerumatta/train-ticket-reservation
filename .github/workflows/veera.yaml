name: CI/CD Pipeline for Java App (Maven + SonarQube + Snyk + Nexus + Tomcat)

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout Code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Set Up JDK
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3Ô∏è‚É£ Cache Maven packages
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 4Ô∏è‚É£ Build and Package WAR
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # 5Ô∏è‚É£ Set WAR file environment variable
      - name: Set WAR file variable
        run: echo "WAR_FILE=$(ls target/*.war)" >> $GITHUB_ENV

      # 6Ô∏è‚É£ SonarQube Analysis
      - name: SonarQube Scan
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=train-ticket-reservation \
            -Dsonar.host.url="${{ secrets.SONAR_HOST_URL }}" \
            -Dsonar.login="${{ secrets.SONAR_TOKEN }}"

      # 7Ô∏è‚É£ Snyk Vulnerability Scan
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      # 8Ô∏è‚É£ Upload Artifact to Nexus Repository
  name: CI/CD Pipeline for Java App (Maven + SonarQube + Snyk + Nexus + Tomcat)

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout Code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Set Up JDK
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3Ô∏è‚É£ Cache Maven packages
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 4Ô∏è‚É£ Build and Package WAR
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # 5Ô∏è‚É£ Set WAR file environment variable
      - name: Set WAR file variable
        run: echo "WAR_FILE=$(ls target/*.war)" >> $GITHUB_ENV

      # 6Ô∏è‚É£ SonarQube Analysis
      - name: SonarQube Scan
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=train-ticket-reservation \
            -Dsonar.host.url="${{ secrets.SONAR_HOST_URL }}" \
            -Dsonar.login="${{ secrets.SONAR_TOKEN }}"

      # 7Ô∏è‚É£ Snyk Vulnerability Scan
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      # 8Ô∏è‚É£ Upload Artifact to Nexus Repository
      - name: Upload Artifact to Nexus
        run: |
          # Determine correct repository
          if [[ "$WAR_FILE" == *"SNAPSHOT"* ]]; then
            REPO_URL="${{ secrets.NEXUS_SNAPSHOT_URL }}"
          else
            REPO_URL="${{ secrets.NEXUS_RELEASE_URL }}"
          fi

          echo "Deploying $WAR_FILE to $REPO_URL"

          mvn deploy:deploy-file \
            -DgroupId=TrainBook \
            -DartifactId=TrainBook \
            -Dversion=1.0.0-SNAPSHOT \
            -Dpackaging=war \
            -Dfile=$WAR_FILE \
            -DrepositoryId=nexus \
            -Durl=$REPO_URL \
            -Dusername=${{ secrets.NEXUS_USERNAME }} \
            -Dpassword=${{ secrets.NEXUS_PASSWORD }}

      # 9Ô∏è‚É£ Check Tomcat connection
      - name: Check Tomcat Connection
        run: |
          curl --fail --anyauth -u "${{ secrets.TOMCAT_USER }}:${{ secrets.TOMCAT_PASSWORD }}" \
          "http://${{ secrets.TOMCAT_HOST }}:8080/manager/text/list"

      # üîü Deploy WAR to Tomcat
      - name: Deploy WAR to Tomcat
        run: |
          curl -v -u "${{ secrets.TOMCAT_USER }}:${{ secrets.TOMCAT_PASSWORD }}" \
          -T "$WAR_FILE" \
          "http://${{ secrets.TOMCAT_HOST }}:8080/manager/text/deploy?path=/TrainBook&update=true"

      # 9Ô∏è‚É£ Check Tomcat connection
      - name: Check Tomcat Connection
        run: |
          curl --fail --anyauth -u "${{ secrets.TOMCAT_USER }}:${{ secrets.TOMCAT_PASSWORD }}" \
          "http://${{ secrets.TOMCAT_HOST }}:8080/manager/text/list"

      # üîü Deploy WAR to Tomcat
      - name: Deploy WAR to Tomcat
        run: |
          curl -v -u "${{ secrets.TOMCAT_USER }}:${{ secrets.TOMCAT_PASSWORD }}" \
          -T "$WAR_FILE" \
          "http://${{ secrets.TOMCAT_HOST }}:8080/manager/text/deploy?path=/REDDY&update=true"

